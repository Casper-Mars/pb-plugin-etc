package main

import (
	"fmt"
	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"protoc-gen-myplugin/template"
)

var gin_package = protogen.GoImportPath("github.com/gin-gonic/gin")

func generate(gen *protogen.Plugin, file *protogen.File) (*protogen.GeneratedFile, error) {
	filename := file.GeneratedFilenamePrefix + "_gin.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-myplugin. DO NOT EDIT .")
	g.P("")
	g.P(fmt.Sprintf("package %s", file.GoPackageName))
	g.P("")
	g.QualifiedGoIdent(gin_package.Ident(""))
	err := generateContent(g, file)
	if err != nil {
		return nil, err
	}
	return g, nil
}

func generateContent(g *protogen.GeneratedFile, file *protogen.File) error {
	services := file.Services
	for _, service := range services {
		err := generateService(g, service)
		if err != nil {
			return err
		}
	}
	return nil
}

func generateService(g *protogen.GeneratedFile, service *protogen.Service) error {
	methods := service.Methods
	info := template.ServiceInfo{
		ServiceName: fmt.Sprintf("%sServer", service.GoName),
		Methods:     buildMethod(methods),
	}
	g.P(info.Exec())
	return nil
}

func buildMethod(methods []*protogen.Method) []template.HttpInfo {
	result := make([]template.HttpInfo, len(methods))
	for i, method := range methods {
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if !ok {
			continue
		}
		result[i] = template.HttpInfo{
			MethodName: method.GoName,
		}
		switch pattern := rule.Pattern.(type) {
		case *annotations.HttpRule_Get:
			result[i].ReqMethod = "GET"
			result[i].Path = pattern.Get
		case *annotations.HttpRule_Post:
			result[i].ReqMethod = "POST"
			result[i].Path = pattern.Post
		case *annotations.HttpRule_Delete:
			result[i].ReqMethod = "DELETE"
			result[i].Path = pattern.Delete
		case *annotations.HttpRule_Put:
			result[i].ReqMethod = "PUT"
			result[i].Path = pattern.Put
		case *annotations.HttpRule_Patch:
			result[i].ReqMethod = "PATCH"
			result[i].Path = pattern.Patch
		case *annotations.HttpRule_Custom:
			result[i].ReqMethod = pattern.Custom.Kind
			result[i].Path = pattern.Custom.Path
		}
	}
	return result
}
